# Files in the config/locales directory are used for internationalization and
# are automatically loaded by Rails. If you want to use locales other than
# English, add the necessary files in this directory.
#
# To use the locales, use `I18n.t`:
#
#     I18n.t "hello"
#
# In views, this is aliased to just `t`:
#
#     <%= t("hello") %>
#
# To use a different locale, set it with `I18n.locale`:
#
#     I18n.locale = :es
#
# This would use the information in config/locales/es.yml.
#
# To learn more about the API, please read the Rails Internationalization guide
# at https://guides.rubyonrails.org/i18n.html.
#
# Be aware that YAML interprets the following case-insensitive strings as
# booleans: `true`, `false`, `on`, `off`, `yes`, `no`. Therefore, these strings
# must be quoted to be interpreted as strings. For example:
#
#     en:
#       "yes": yup
#       enabled: "ON"

en:
  speeches:
    text_form: &text_form_en
      own_text: "Own text"
      enter_text: "Enter your own text..."
      speak: "Speak"
      select_category: "Select category"
      text_form_label: "Speech output form"
      enter_text_aria: "Enter text to be spoken"
      select_category_aria: "Select category for the text"
      speak_button_aria: "Speak the entered text"

    conversation_form:
      <<: *text_form_en
      new_conversation_form: "Start new conversation"

    index:
      <<: *text_form_en
      categories: "Categories"
      manage_categories: "Manage categories"
      frequently_used: "Frequently used"
      page_title: "Speech Output"
      categories_list: "List of available categories"
      category_link: "Go to category %{name} with %{count} uses"
      frequent_sentences_list: "List of frequently used sentences"
      frequent_sentences: "Frequently used sentences"
      frequent_sentences_description: "List of most frequently used sentences"
      confirm_delete: "Do you really want to delete this sentence?"

    category:
      <<: *text_form_en
      back: "Back"
      back_to_categories: "Back to categories overview"
      category_sentences: "Sentences in category %{category}"
      sentences_list: "List of sentences in this category"
      no_sentences: "No sentences available in this category"

    usage_count:
      one: "%{count} use"
      other: "%{count} uses"

    create:
      speak_sentence: "Speaking the sentence: %{text}"

    speak:
      speaking_sentence: "Playing the sentence: %{text}"

    destroy:
      sentence_deleted: "Sentence was deleted"

    sentence:
      usage_count: "Usage count"
      category_label: "Category: %{name}"
      delete_sentence: "Delete sentence: %{text}"
      speak_sentence: "Speak sentence: %{text}"

  languages:
    german: "German"
    english: "English"

  suggestions:
    system_prompt: |
      You are a language assistant communicating with a patient who is unable to speak. Your task is to provide meaningful suggestions for communication word-finding. The output should be in JSON format to adapt the response suggestions.
      You always generate suggestions for the patient. This means, put yourself in their position and think about what they would say next.

      # Details

      - The patient can type responses that you will process
      - As a language assistant, you should provide context-related suggestions for possible answers
      - When the patient talks about a topic, like food, make appropriate suggestions (e.g., "I would like a pizza" or "I would like some bread")
      - The response suggestions should always be in the same JSON format: an array with a list of messages, each containing a "content" attribute
      - I will give you both the patient's responses/questions and the messages of a third person in the room. These have the role "Patient". And I will give you the messages of a third person in the room. These have the role "Visitor".
      - The last message of the patient/visitor is always at the end of the conversation. This gives you the important information for the suggestions. The previous messages are important for the context.
      - I will give you also a description of the patient (user_description), which contains important context information
      - I will give you also the conversation summary (summary), which contains important context information
      - I will give you also the category of the sentence (category), which contains important context information
      # Steps

      1. Process the patient's input
      2. Identify the context of communication (e.g., topics like food, drinks, activities)
      3. Create context-related response suggestions
      4. Structure the suggestions in JSON format

      # Output Format

      The output must be in JSON format and always an array with at least 4 objects:

      ```json
      {
        "response": [
          {
              "content": "[Suggestion1]"
          },
          {
              "content": "[Suggestion2]"
          }
      ]
      ```

      # Examples

      ## Example 1

      ### Input
      Patient enters "I'm hungry"

      ### Output
      ```json
      [
          {
              "content": "I would like a pizza"
          },
          {
              "content": "I would like some bread"
          }
      ]
      ```

      ## Example 2

      ### Input
      Patient says "I want something to drink"

      ### Output
      ```json
      [
          {
              "content": "I would like a glass of water"
          },
          {
              "content": "I would like some juice"
          }
      ]
      ```

      # Notes

      - Ensure relevance and appropriateness of suggestions in relation to the given context
      - The JSON output structure should be strictly maintained

  activerecord:
    errors:
      messages:
        record_invalid: "Validation failed: %{errors}"
        blank: "can't be blank"
        taken: "has already been taken"
      models:
        sentence:
          attributes:
            content:
              blank: "Text can't be blank"
            category:
              blank: "Category must be selected"
            language:
              blank: "Language must be selected"
    attributes:
      user:
        first_name: "First Name"
        last_name: "Last Name"
        email: "Email"
        password: "Password"
        password_confirmation: "Password Confirmation"

  messages:
    form:
      enter_message: "Enter message..."
      speak: "Speak"
      send: "Send"

  conversations:
    show:
      conversation: "Conversation"
      back_to_home: "Back to Home"
      messages_list: "Conversation messages"
      no_messages: "No messages in this conversation yet"
      message_form: "New message form"
      suggestions: "AI suggestions for responses"
      toggle_recording: "Toggle voice recording"
      recording_active: "Recording in progress"
      recording_inactive: "Recording stopped"
      enter_message: "Enter message..."
    index:
      title: "My Conversations"
      new_conversation: "New Conversation"
      messages_count:
        one: "%{count} message"
        other: "%{count} messages"
      created_at: "Created on %{date}"
      no_conversations: "No conversations yet"
      conversations_list: "List of conversations"
      conversation_link: "Go to conversation: %{text}"
      initial_sentence: "Initial sentence"
      message_count: "Number of messages"
      creation_date: "Creation date"
      category: "Category"

  settings:
    show:
      title: "Settings"
      about_me: "About Me"
      system: "System"
      about_settings: "About Me Settings"
      description_placeholder: "Tell us about yourself, your preferences, and any important information that should be considered during conversations..."
      voice_settings: "Voice Settings"
      voice_settings_description: "The ElevenLabs integration is optional. If no API credentials are entered, the browser's speech synthesis will be used automatically. However, ElevenLabs offers more natural speech quality."
      llm_settings: "AI Settings"
      save: "Save Changes"
      conversation_summary: "Conversation Analysis"
      conversation_summary_explanation: "The conversation analysis helps the AI better understand your preferences and communication patterns. It analyzes your past conversations to provide more personalized suggestions. It's recommended to update this analysis periodically as your conversations grow."
      generate_summary: "Generate Summary"
      last_generated: "Last generated: %{time}"
      no_summary: "No conversation summary generated yet"
      generating_summary: "Generating..."
    update:
      updated: "Settings updated successfully"
    generate_summary:
      prompt:
        intro: "Please analyze these conversations and extract key information about the participants."
        user_section: "The user/patient"
        user_points: |
          - Personal preferences
          - Medical conditions or needs
          - Daily routines or habits
          - Important relationships or contacts
          - Frequently discussed topics
        partners_section: "The conversation partners/assistants"
        partner_points: |
          - Names or identifiers used
          - Roles or relationships to the user
          - Communication patterns
        privacy_note: "Only include information that was explicitly mentioned in the conversations. Maintain privacy by excluding sensitive medical details."
      success: "Conversation summary was successfully generated"
      error: "Error generating summary: %{message}"
      errors:
        unsupported_provider: "Unsupported LLM provider: %{provider}"

  shared:
    user_menu:
      settings: "Settings"
      sign_out: "Sign Out"
    header:
      main_navigation: "Main navigation"
      home: "Home"
      speeches: "Speech output"
      conversations: "Conversations"
      sign_in: "Sign in"
    flash_messages:
      close_message: "Close message"
      success_message: "Success message"
      error_message: "Error message"

  layouts:
    application:
      app_description: "Listen2Me - A communication aid for people with speech impairments"
      skip_to_main: "Skip to main content"
      skip_to_main_aria: "Skip navigation and go directly to main content"
      keyboard_shortcuts: "Keyboard shortcuts and accessibility aids"

  accessibility:
    keyboard_shortcuts:
      title: "Keyboard Shortcuts"
      main_content: "Alt + 1: Jump to main content"
      search: "Alt + S: Jump to search"
      new_text: "Alt + N: Enter new text"

  categories:
    new:
      title: "Create New Category"
      back_to_categories: "Back to Categories"
    edit:
      title: "Edit Category"
      back_to_categories: "Back to Categories"
    form:
      name: "Name"
      name_placeholder: "Enter category name..."
      icon_name: "Icon"
      submit:
        create: "Create Category"
        update: "Save Changes"
    common:
      cancel: "Cancel"
    update:
      category_updated: "Category was successfully updated"

  speech_recognition:
    errors:
      network: "Network error - Connection to speech recognition service failed"
      not_allowed: "Microphone access was denied"
      audio_capture: "No microphone found"
      aborted: "Speech recognition was interrupted"
      default: "Error during speech recognition"
      unsupported: "Speech recognition is not supported in this browser. Please use Chrome, Edge or Safari."

  suggestion_service:
    summary_prompt: |
      Please analyze these conversations and create a detailed summary in markdown format.
      Structure the information as follows:

      ## User Profile
      ### Preferences
      - [List preferences]
      
      ### Daily Routines
      - [List routines]
      
      ### Relationships
      - [List relationships]
      
      ### Frequent Topics
      - [List topics]
      
      ## Conversation Partners
      ### [Partner Name/Role]
      - Relationship: [Description]
      - Communication Style: [Description]
      - Typical Interactions: [Description]

      Only include information explicitly mentioned in the conversations.
      Maintain privacy by excluding sensitive medical details.
      Use markdown formatting for better readability (headers, lists, emphasis).
    errors:
      unsupported_provider: "Unsupported LLM provider: %{provider}"
