// get-stream@6.0.1 downloaded from https://ga.jspm.io/npm:get-stream@6.0.1/index.js

import r from"buffer";import e from"stream";import t from"util";var f={};var a=r.Buffer;const{PassThrough:n}=e;f=r=>{r={...r};const{array:e}=r;let{encoding:t}=r;const f="buffer"===t;let o=false;e?o=!(t||f):t=t||"utf8";f&&(t=null);const u=new n({objectMode:o});t&&u.setEncoding(t);let s=0;const c=[];u.on("data",(r=>{c.push(r);o?s=c.length:s+=r.length}));u.getBufferedValue=()=>e?c:f?a.concat(c,s):c.join("");u.getBufferedLength=()=>s;return u};var o=f;var u={};const{constants:s}=r;const c=e;const{promisify:i}=t;const g=o;const d=i(c.pipeline);class MaxBufferError extends Error{constructor(){super("maxBuffer exceeded");this.name="MaxBufferError"}}async function getStream(r,e){if(!r)throw new Error("Expected a stream");e={maxBuffer:Infinity,...e};const{maxBuffer:t}=e;const f=g(e);await new Promise(((e,a)=>{const rejectPromise=r=>{r&&f.getBufferedLength()<=s.MAX_LENGTH&&(r.bufferedData=f.getBufferedValue());a(r)};(async()=>{try{await d(r,f);e()}catch(r){rejectPromise(r)}})();f.on("data",(()=>{f.getBufferedLength()>t&&rejectPromise(new MaxBufferError)}))}));return f.getBufferedValue()}u=getStream;u.buffer=(r,e)=>getStream(r,{...e,encoding:"buffer"});u.array=(r,e)=>getStream(r,{...e,array:true});u.MaxBufferError=MaxBufferError;var m=u;const B=u.buffer,l=u.array;const x=u.MaxBufferError;export default m;export{x as MaxBufferError,l as array,B as buffer};

