// cross-spawn@7.0.6 downloaded from https://ga.jspm.io/npm:cross-spawn@7.0.6/index.js

import*as n from"child_process";import*as r from"path";import o from"./lib/util/resolveCommand.js";import*as e from"fs";import*as t from"shebang-command";import a from"buffer";import c from"process";import"which";import"path-key";var s={};const i=/([()\][%!^"`<>&|;, *?])/g;function escapeCommand(n){n=n.replace(i,"^$1");return n}function escapeArgument(n,r){n=`${n}`;n=n.replace(/(?=(\\+?)?)\1"/g,'$1$1\\"');n=n.replace(/(?=(\\+?)?)\1$/,"$1$1");n=`"${n}"`;n=n.replace(i,"^$1");r&&(n=n.replace(i,"^$1"));return n}s.command=escapeCommand;s.argument=escapeArgument;var m=e;try{"default"in e&&(m=e.default)}catch(n){}var f=t;try{"default"in t&&(f=t.default)}catch(n){}var l={};var u=a.Buffer;const p=m;const d=f;function readShebang$1(n){const r=150;const o=u.alloc(r);let e;try{e=p.openSync(n,"r");p.readSync(e,o,0,r,0);p.closeSync(e)}catch(n){}return d(o.toString())}l=readShebang$1;var y=l;var g=r;try{"default"in r&&(g=r.default)}catch(n){}var h={};var E=c;const v=g;const N=o;const $=s;const w=y;const S=E.platform==="win32";const O=/\.(?:com|exe)$/i;const b=/node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;function detectShebang(n){n.file=N(n);const r=n.file&&w(n.file);if(r){n.args.unshift(n.file);n.command=r;return N(n)}return n.file}function parseNonShell(n){if(!S)return n;const r=detectShebang(n);const o=!O.test(r);if(n.options.forceShell||o){const o=b.test(r);n.command=v.normalize(n.command);n.command=$.command(n.command);n.args=n.args.map((n=>$.argument(n,o)));const e=[n.command].concat(n.args).join(" ");n.args=["/d","/s","/c",`"${e}"`];n.command=E.env.comspec||"cmd.exe";n.options.windowsVerbatimArguments=true}return n}function parse$1(n,r,o){if(r&&!Array.isArray(r)){o=r;r=null}r=r?r.slice(0):[];o=Object.assign({},o);const e={command:n,args:r,options:o,file:void 0,original:{command:n,args:r}};return o.shell?e:parseNonShell(e)}h=parse$1;var T=h;var _={};var C=c;const k=C.platform==="win32";function notFoundError(n,r){return Object.assign(new Error(`${r} ${n.command} ENOENT`),{code:"ENOENT",errno:"ENOENT",syscall:`${r} ${n.command}`,path:n.command,spawnargs:n.args})}function hookChildProcess(n,r){if(!k)return;const o=n.emit;n.emit=function(e,t){if(e==="exit"){const e=verifyENOENT(t,r);if(e)return o.call(n,"error",e)}return o.apply(n,arguments)}}function verifyENOENT(n,r){return k&&n===1&&!r.file?notFoundError(r.original,"spawn"):null}function verifyENOENTSync(n,r){return k&&n===1&&!r.file?notFoundError(r.original,"spawnSync"):null}_={hookChildProcess:hookChildProcess,verifyENOENT:verifyENOENT,verifyENOENTSync:verifyENOENTSync,notFoundError:notFoundError};var A=_;var F=n;try{"default"in n&&(F=n.default)}catch(n){}var j={};const x=F;const P=T;const z=A;function spawn(n,r,o){const e=P(n,r,o);const t=x.spawn(e.command,e.args,e.options);z.hookChildProcess(t,e);return t}function spawnSync(n,r,o){const e=P(n,r,o);const t=x.spawnSync(e.command,e.args,e.options);t.error=t.error||z.verifyENOENTSync(t.status,e);return t}j=spawn;j.spawn=spawn;j.sync=spawnSync;j._parse=P;j._enoent=z;var B=j;const V=j.sync;const q=j.spawn,D=j._parse,G=j._enoent;export{G as _enoent,D as _parse,B as default,q as spawn,V as sync};

